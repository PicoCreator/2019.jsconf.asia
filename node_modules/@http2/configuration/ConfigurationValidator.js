const Validator = require('jsonschema/lib/validator')
const {schema: manifestSchema} = require('@http2/manifest')
const {hostSchema} = require('./schema/host')
const {optionsSchema} = require('./schema/options')
const {isExtglob} = require('./formats/isExtglob')
const {isCalculation} = require('./formats/isCalculation')
const {normaliseHost} = require('./normaliseHost')

module.exports.ConfigurationValidator =
class ConfigurationValidator extends Validator {
  constructor () {
    super()

    this.customFormats.extglob = isExtglob
    this.customFormats.calculation = isCalculation

    this.addSchema(manifestSchema, '/Manifest')
    this.addSchema(hostSchema, '/Host')
    this.addSchema(optionsSchema, '/Options')
  }

  validate (instance) {
    const schema = {'$ref': '/Options'}
    const {errors} = super.validate(instance, schema)
    if (errors.length) {
      const error = errors[0]
      if (error instanceof Error) throw error
      else throw new Error(`Invalid Configuration: ${error.toString()}`)
    }
    return true
  }
}

module.exports.normaliseHost = normaliseHost
