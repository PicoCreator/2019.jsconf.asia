const test = require('blue-tape')
const {toASCII} = require('punycode/')
const {ConfigurationValidator} = require('..')

test('Check a valid blank config', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {}
  t.doesNotThrow(() => validator.validate(given))
})

test('Check an invalid config', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {foo: 'bar'}
  t.throws(() => validator.validate(given))
})

test('Check a custom type with anyOf', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {
    workers: {
      count: 'max_physical_cpu_cores / 2'
    }
  }
  t.doesNotThrow(() => validator.validate(given))
})

test('Check README example', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {hosts: [{domain: 'http2.live', root: 'public'}]}
  t.doesNotThrow(() => validator.validate(given))
})

test('Check fallback as string', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {hosts: [{fallback: '/index.html'}]}
  t.doesNotThrow(() => validator.validate(given))
})

test('Check fallback as status code map', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {
    hosts: [{
      fallback: {
        200: '/200.html',
        404: '/404.html'
      }
    }]
  }
  t.doesNotThrow(() => validator.validate(given))
})

test('Check invalid fallback status code', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {hosts: [{fallback: {666: '/evil.html'}}]}
  t.throws(() => validator.validate(given))
})

test('Check valid HSTS', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {hosts: [{strictTransportSecurity: {maxAge: 5184000}}]}
  t.doesNotThrow(() => validator.validate(given))
})

test('Check invalid HSTS', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {hosts: [{strictTransportSecurity: {maxAge: 'ğŸ’©'}}]}
  t.throws(() => validator.validate(given))
})

test('Check valid internationalized domain name (IDN)', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {
    hosts: [
      {domain: 'ğŸ’©.com'},
      {domain: toASCII('ğŸ’©.com')}
    ]
  }
  t.doesNotThrow(() => validator.validate(given))
})

test('Check valid IPv4 hostname', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {hosts: [{domain: '123.45.67.89'}]}
  t.doesNotThrow(() => validator.validate(given))
})

test('Check valid IPv6 hostname', async (t) => {
  const validator = new ConfigurationValidator()
  const given = {hosts: [{domain: '::1'}]}
  t.doesNotThrow(() => validator.validate(given))
})
