const {resolve} = require('path')
const {toASCII} = require('punycode/')
const {normalise} = require('@http2/manifest')

function defaultHost () {
  return {
    domain: '',
    root: '',
    fallback: {},
    cacheControl: {
      immutable: []
    },
    directories: {
      trailingSlash: 'always'
    },
    accessControl: {
      allowOrigin: '*'
    },
    serviceWorker: {
      allowed: '/'
    },
    strictTransportSecurity: {
      maxAge: 60 * 24 * 3600
    },
    manifest: []
  }
}

function resolvePath (root, path) {
  const cleaned = path
    .replace(/\.{2,}/g, '')
    .replace(/^\/+(.*)/, '$1')
  return resolve(root, cleaned)
}

module.exports.normaliseHost =
function normaliseHost (host = {}) {
  const normalised = defaultHost()
  if (typeof host.domain === 'string') {
    normalised.domain = toASCII(host.domain).toLowerCase()
  }
  if (typeof host.root === 'string') {
    normalised.root = resolve(host.root)
  }
  if (typeof host.fallback === 'string') {
    normalised.fallback = {200: resolvePath(host.root, host.fallback)}
  }
  if (typeof host.fallback === 'object') {
    for (const status of Object.keys(host.fallback)) {
      if (!isNaN(status) && status >= 200 && status < 600) {
        if (typeof host.fallback[status] === 'string') {
          normalised.fallback[status] = resolvePath(
            host.root,
            host.fallback[status]
          )
        }
      }
    }
  }
  if (typeof host.cacheControl === 'object') {
    if (Array.isArray(host.cacheControl.immutable)) {
      const globs = host.cacheControl.immutable
        .filter((value) => typeof value === 'string')
      normalised.cacheControl.immutable.push(...globs)
    }
  }
  if (typeof host.directories === 'object') {
    const allowed = ['always', 'never']
    const {trailingSlash} = host.directories
    if (allowed.includes(trailingSlash)) {
      normalised.directories.trailingSlash = trailingSlash
    }
  }
  if (typeof host.accessControl === 'object' &&
    typeof host.accessControl.allowOrigin === 'string'
  ) {
    normalised.accessControl.allowOrigin =
      host.accessControl.allowOrigin
  }
  if (typeof host.serviceWorker === 'object' &&
    typeof host.serviceWorker.allowed === 'string'
  ) {
    normalised.serviceWorker.allowed =
      host.serviceWorker.allowed
  }
  if (typeof host.strictTransportSecurity === 'object') {
    const {maxAge} = host.strictTransportSecurity
    if (Number.isSafeInteger(maxAge)) {
      normalised.strictTransportSecurity.maxAge = maxAge
    }
  }
  if (Array.isArray(host.manifest)) {
    normalised.manifest = normalise(host.manifest)
  }
  return normalised
}
